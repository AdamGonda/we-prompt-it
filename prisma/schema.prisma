generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  firstName    String
  lastName     String
  username     String?    @unique
  picture      String     @default("")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  prompts      Prompt[]
  likedprompts Like[]
  reputation   Int        @default(0)
  followers    Follower[] @relation("Followers")
  followings   Follower[] @relation("Followings")
  comments     Comment[]
  isDeleted    Boolean    @default(false)
}

model Prompt {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  description String @default("")
  forkedCount Int    @default(0)
  content     String
  fulltext    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  aiModelId Int?
  aiModel   AiModel?  @relation(fields: [aiModelId], references: [id])
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  likes     Like[]
  tags      Tag[]
  comments  Comment[]

  parentId     Int?
  parentPrompt Prompt?  @relation("ChildPrompts", fields: [parentId], references: [id])
  childPrompts Prompt[] @relation("ChildPrompts")
}

model AiModel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  link      String
  prompts   Prompt[]
  isDeleted Boolean  @default(false)
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  promptId  Int
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  @@unique([userId, promptId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  prompts   Prompt[]
  color     String   @default("")
  isDeleted Boolean  @default(false)
}

// in the future
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  promptId  Int?
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
  isDeleted Boolean  @default(false)
}

model Follower {
  id          Int     @id @default(autoincrement())
  userId      Int
  followingId Int
  user        User    @relation("Followers", fields: [userId], references: [id])
  following   User    @relation("Followings", fields: [followingId], references: [id])
  isDeleted   Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, followingId])
}
