generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  firstName     String
  lastName      String
  picture       String          @default("")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  repos         Repo[]
  starredRepos  Star[]
  reputation    Int             @default(0)
  followers     Follower[]      @relation("Followers")
  followings    Follower[]      @relation("Followings")
  changeRequest ChangeRequest[]
  comments      Comment[]
}

model Repo {
  id          Int    @id @default(autoincrement())
  name        String @default("")
  description String @default("")
  promptId    Int    @unique
  prompt      Prompt @relation(fields: [promptId], references: [id])

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  authorId       Int
  author         User            @relation(fields: [authorId], references: [id])
  stars          Star[]
  tags           Tag[]
  comments       Comment[]
  changeRequests ChangeRequest[]
}

model Prompt {
  id          Int    @id @default(autoincrement())
  version     String @default("0.0.1")
  description String @default("")
  repo        Repo?
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aIModelId Int?
  aiModel   AIModel? @relation(fields: [aIModelId], references: [id])
}

model AIModel {
  id     Int      @id @default(autoincrement())
  name   String
  Prompt Prompt[]
}

model ChangeRequest {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  content     String

  repoId    Int?
  repo      Repo?     @relation(fields: [repoId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id              Int            @id @default(autoincrement())
  content         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorId        Int
  author          User           @relation(fields: [authorId], references: [id])
  repoId          Int?
  repo            Repo?          @relation(fields: [repoId], references: [id])
  changeRequestId Int?
  changeRequest   ChangeRequest? @relation(fields: [changeRequestId], references: [id])
}

model Star {
  id     Int   @id @default(autoincrement())
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  repoId Int?
  repo   Repo? @relation(fields: [repoId], references: [id])
}

model Follower {
  id          Int  @id @default(autoincrement())
  userId      Int  @map("user_id")
  followingId Int  @map("following_id")
  user        User @relation("Followers", fields: [userId], references: [id])
  following   User @relation("Followings", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  repos Repo[]
}
