generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  email         String          @unique
  firstName     String
  lastName      String
  picture       String          @default("")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  repos         Repo[]
  starredRepos  Star[]
  reputation    Int             @default(0)
  followers     Follower[]      @relation("Followers")
  followings    Follower[]      @relation("Followings")
  changeRequest ChangeRequest[]
  comments      Comment[]
  isDeleted     Boolean         @default(false)
}

model Repo {
  id            String @id
  name          String @default("")
  description   String @default("")
  noTimesForked Int    @default(0)

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isDeleted      Boolean         @default(false)
  authorId       String
  author         User            @relation(fields: [authorId], references: [id])
  stars          Star[]
  tags           Tag[]
  comments       Comment[]
  changeRequests ChangeRequest[]
  prompts        Prompt[]

  parentId   String?
  parentRepo Repo?   @relation("ChildRepos", fields: [parentId], references: [id])
  childRepos Repo[]  @relation("ChildRepos")
}

model Prompt {
  id          String  @id
  version     Int  @default(1)
  description String  @default("")
  content     String
  isDeleted   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aIModelId String?
  aiModel   AIModel? @relation(fields: [aIModelId], references: [id])
  repoId    String
  repo      Repo     @relation(fields: [repoId], references: [id])
}

model AIModel {
  id        String   @id
  name      String
  Prompt    Prompt[]
  isDeleted Boolean  @default(false)
}

model ChangeRequest {
  id          String @id
  title       String
  description String
  content     String

  repoId    String?
  repo      Repo?     @relation(fields: [repoId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  isDeleted Boolean   @default(false)
}

model Comment {
  id              String         @id
  content         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorId        String
  author          User           @relation(fields: [authorId], references: [id])
  repoId          String?
  repo            Repo?          @relation(fields: [repoId], references: [id])
  changeRequestId String?
  changeRequest   ChangeRequest? @relation(fields: [changeRequestId], references: [id])
  isDeleted       Boolean        @default(false)
}

model Star {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  repoId    String
  repo      Repo     @relation(fields: [repoId], references: [id])
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  @@unique([userId, repoId])
}

model Follower {
  id          String  @id
  userId      String
  followingId String
  user        User    @relation("Followers", fields: [userId], references: [id])
  following   User    @relation("Followings", fields: [followingId], references: [id])
  isDeleted   Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, followingId])
}

model Tag {
  id        String  @id
  name      String  @unique
  repos     Repo[]
  isDeleted Boolean @default(false)
}
