generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  username     String?    @unique
  image        String     @default("")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reputation   Int        @default(0)
  isDeleted    Boolean    @default(false)
  comments     Comment[]
  followings   Follower[] @relation("Followings")
  followers    Follower[] @relation("Followers")
  likedprompts Like[]
  prompts      Prompt[]
}

model Prompt {
  id           Int       @id @default(autoincrement())
  name         String
  slug         String    @unique
  description  String    @default("")
  forkedCount  Int       @default(0)
  content      String
  fulltext     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
  aiModelId    Int?
  authorId     Int
  parentId     Int?
  comments     Comment[]
  likes        Like[]
  aiModel      AiModel?  @relation(fields: [aiModelId], references: [id])
  author       User      @relation(fields: [authorId], references: [id])
  parentPrompt Prompt?   @relation("ChildPrompts", fields: [parentId], references: [id])
  childPrompts Prompt[]  @relation("ChildPrompts")
  tags         Tag[]     @relation("PromptToTag")
}

model AiModel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  link      String
  isDeleted Boolean  @default(false)
  prompts   Prompt[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  promptId  Int
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, promptId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isDeleted Boolean  @default(false)
  prompts   Prompt[] @relation("PromptToTag")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  promptId  Int?
  isDeleted Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
}

model Follower {
  id          Int      @id @default(autoincrement())
  userId      Int
  followingId Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  following   User     @relation("Followings", fields: [followingId], references: [id])
  user        User     @relation("Followers", fields: [userId], references: [id])

  @@unique([userId, followingId])
}
