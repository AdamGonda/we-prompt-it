generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  firstName      String
  lastName       String
  picture        String          @default("")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  prompts        Prompt[]
  starredPrompts Star[]
  reputation     Int             @default(0)
  followers      Follower[]      @relation("Followers")
  followings     Follower[]      @relation("Followings")
  changeRequest  ChangeRequest[]
  comments       Comment[]
}

model Prompt {
  id          Int           @id @default(autoincrement())
  title       String        @default("")
  description String        @default("")
  content     PromptContent @relation(fields: [promptContentId], references: [id])

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  authorId        Int
  author          User            @relation(fields: [authorId], references: [id])
  stars           Star[]
  tags            Tag[]
  promptContentId Int
  comments        Comment[]
  changeRequests  ChangeRequest[]
}

model PromptContent {
  id        Int      @id @default(autoincrement())
  version   String   @default("0.0.1")
  content   String   @default("")
  prompt    Prompt[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aIModelId Int
  aiModel   AIModel  @relation(fields: [aIModelId], references: [id])
}

model AIModel {
  id            Int             @id @default(autoincrement())
  name          String
  PromptContent PromptContent[]
}

model ChangeRequest {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  content     String

  promptId  Int
  prompt    Prompt    @relation(fields: [promptId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id              Int            @id @default(autoincrement())
  content         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorId        Int
  author          User           @relation(fields: [authorId], references: [id])
  promptId        Int?
  prompt          Prompt?        @relation(fields: [promptId], references: [id])
  changeRequestId Int?
  changeRequest   ChangeRequest? @relation(fields: [changeRequestId], references: [id])
}

model Star {
  id       Int    @id @default(autoincrement())
  userId   Int
  promptId Int
  user     User   @relation(fields: [userId], references: [id])
  prompt   Prompt @relation(fields: [promptId], references: [id])
}

model Follower {
  id          Int  @id @default(autoincrement())
  userId      Int  @map("user_id")
  followingId Int  @map("following_id")
  user        User @relation("Followers", fields: [userId], references: [id])
  following   User @relation("Followings", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  prompts Prompt[]
}
